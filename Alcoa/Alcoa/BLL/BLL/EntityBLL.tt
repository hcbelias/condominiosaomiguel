<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
#>
<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#><#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\..\DAL\DataModel.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = "BLL";

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

// Write out support code to primary template output file
WriteHeader(fileManager);
BeginNamespace(namespaceName, code);
WriteCustomObservableCollection();
EndNamespace(namespaceName);

// Emit Entity Types
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    fileManager.StartNewFile("BLL" + entity.Name + ".cs");#>
using DAL;
using Model;
using BLL.DTOAssembler;
using BLL.DTOQuery;

<#BeginNamespace(namespaceName, code);
    bool entityHasNullableFKs = entity.NavigationProperties.Any(np => np.GetDependentProperties().Any(p=>ef.IsNullable(p)));
#>
<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=code.Escape(entity)#>BLL : BaseBLL
{
	DAL.<#=code.Escape(entity)#> m_Data;

	public <#=code.Escape(entity)#>BLL(DAL.<#=code.Escape(entity)#> p_Data)
	{
		this.m_Data = p_Data;
	}

	public override Model.BaseModel getModel()
	{
		if(this.m_Data == null)
			return null;

		Model.<#=code.Escape(entity)#>Model v_Return = new Model.<#=code.Escape(entity)#>Model();
		<#

	foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
	{#>
		v_Return.<#=code.Escape(edmProperty)#> = this.m_Data.<#=code.Escape(edmProperty)#>;
<#	} #>
		v_Return.ComboboxText = this.m_Data.ComboboxText;
		return v_Return;
	}

	public Model.<#=code.Escape(entity)#>Model getModelComplete()
	{
		Model.<#=code.Escape(entity)#>Model v_Return = (Model.<#=code.Escape(entity)#>Model) getModel();
		if(v_Return == null)
			return null;

<#

	foreach (NavigationProperty navProperty in entity.NavigationProperties)	{ #>
		v_Return.<#=code.Escape(navProperty)#> = get<#=code.Escape(navProperty)#>();
<#
		

	}
#>
		return v_Return;
	}

<#	foreach (NavigationProperty navProperty in entity.NavigationProperties)
	{
		if(navProperty.FromEndMember.RelationshipMultiplicity != RelationshipMultiplicity.ZeroOrOne && navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many ||
			navProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne && navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
		{ #>
	internal List<<#=code.Escape(navProperty)#>Model> get<#=code.Escape(navProperty)#>()
	{
		List<<#=code.Escape(navProperty)#>Model> v_Model = new List<<#=code.Escape(navProperty)#>Model>();
		if (v_Model != null && m_Data != null && m_Data.<#=code.Escape(navProperty)#>!= null)
		{
			//v_Model = (<#=code.Escape(navProperty)#>Model)(new BLL.<#=code.Escape(navProperty)#>BLL(m_Data.<#=code.Escape(navProperty)#>).getModel());
		}
		return v_Model;
	}
<#		}
    }
	foreach (NavigationProperty navProperty in entity.NavigationProperties)
	{
		if(navProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many && navProperty.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many || 
			navProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne && navProperty.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many ||
			navProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One && 
			navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne ||
			navProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne && 
			navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne){#>
	internal <#=code.Escape(navProperty)#>Model get<#=code.Escape(navProperty)#>()
	{
		<#=code.Escape(navProperty)#>Model v_Model = new <#=code.Escape(navProperty)#>Model();
		if (v_Model != null && m_Data != null && m_Data.<#=code.Escape(navProperty)#>!= null)
		{
			v_Model = (<#=code.Escape(navProperty)#>Model)(new BLL.<#=code.Escape(navProperty)#>BLL(m_Data.<#=code.Escape(navProperty)#>).getModel());
		}
		return v_Model;
	}
<#      }
		

	}#>
	public static <#=code.Escape(entity)#>Model Get<#=code.Escape(entity)#>(int p_Identifier)
	{
		<#=code.Escape(entity)#> v_Data = <#=code.Escape(entity)#>.Get<#=code.Escape(entity)#>(p_Identifier);
        return  ( <#=code.Escape(entity)#>Model)(new BLL.<#=code.Escape(entity)#>BLL(v_Data).getModelComplete());
	}

	public static <#=code.Escape(entity)#>Model Get<#=code.Escape(entity)#>(int p_Identifier, <#=code.Escape(entity)#>DTOQuery p_Query)
	{
		<#=code.Escape(entity)#> v_Data = <#=code.Escape(entity)#>.Get<#=code.Escape(entity)#>(p_Identifier);
		return (new <#=code.Escape(entity)#>DTOAssembler()).Create(v_Data, null, p_Query);
	}

	public static ICollection<<#=code.Escape(entity)#>Model> List<#=code.Escape(entity)#>()
	{
		ICollection<<#=code.Escape(entity)#>Model> v_ReturnList = new Collection<<#=code.Escape(entity)#>Model>();
		ICollection<<#=code.Escape(entity)#>> v_Data = <#=code.Escape(entity)#>.List<#=code.Escape(entity)#>();
		IEnumerator v_Enumerator = v_Data.GetEnumerator();
		while (v_Enumerator.MoveNext())
		{
			v_ReturnList.Add((new <#=code.Escape(entity)#>DTOAssembler()).Create((<#=code.Escape(entity)#>)v_Enumerator.Current, null, null));
		}
		return v_ReturnList;
	}

	private static <#=code.Escape(entity)#>Model CreateModel(<#=code.Escape(entity)#> v_Data)
    {
        return (<#=code.Escape(entity)#>Model) (new BLL.<#=code.Escape(entity)#>BLL(v_Data)).getModelComplete();
    }

	public static void Delete<#=code.Escape(entity)#>(int p_Identifier)
	{
		<#=code.Escape(entity)#>.Delete<#=code.Escape(entity)#>(p_Identifier);
	}

	public static void Create<#=code.Escape(entity)#>(<#=code.Escape(entity)#>Model p_Model)
	{
		DAL.<#=code.Escape(entity)#>.Create(p_Model);
	}

	public static void Edit<#=code.Escape(entity)#>(<#=code.Escape(entity)#>Model p_Model)
	{
		DAL.<#=code.Escape(entity)#>.Edit(p_Model);
	}
}
<#
    EndNamespace(namespaceName);
}

if (!VerifyTypesAreCaseInsensitiveUnique(ItemCollection))
{
    return "";
}

fileManager.Process();

#>
<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

bool IsReadWriteAccessibleProperty(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);

    return getter != "private" && getter != "protected" && setter != "private" && setter != "protected";
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

void WriteCustomObservableCollection()
{
#>
// An System.Collections.ObjectModel.ObservableCollection that raises
// individual item removal notifications on clear and prevents adding duplicates.
public class FixupCollection<T> : ObservableCollection<T>
{
    protected override void ClearItems()
    {
        new List<T>(this).ForEach(t => Remove(t));
    }

    protected override void InsertItem(int index, T item)
    {
        if (!this.Contains(item))
        {
            base.InsertItem(index, item);
        }
    }
}
<#+
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    Dictionary<string, bool> alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(StructuralType type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }

    }

    return true;
}
#>

<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
#>
<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#><#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\..\DAL\DataModel.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = "BLL.DTOAssembler";

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

// Write out support code to primary template output file

BeginNamespace(namespaceName, code);
EndNamespace(namespaceName);

// Emit Entity Types
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    fileManager.StartNewFile("DTOAssembler"+entity.Name+".cs");
		#>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using BLL.DTOQuery;
using DAL;
using Model;
using System.Linq;
<#
    BeginNamespace(namespaceName, code);
    bool entityHasNullableFKs = entity.NavigationProperties.Any(np => np.GetDependentProperties().Any(p=>ef.IsNullable(p)));
#>
<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=code.Escape(entity)#>DTOAssembler
{
	public virtual ICollection<Model.<#=code.Escape(entity)#>Model> Create(ICollection<<#=code.Escape(entity)#>> p_ObjectListDAL, <#=code.Escape(entity)#>DTOQuery p_Query)
	{
		return p_ObjectListDAL.Select(i_ObjectDAL => Create(i_ObjectDAL, p_Query)).Select(model => (<#=code.Escape(entity)#>Model) model).ToList();
	}

	public virtual Model.<#=code.Escape(entity)#>Model Create(<#=code.Escape(entity)#> p_OriginalObj, <#=code.Escape(entity)#>DTOQuery p_Query)
	{
		return Create(p_OriginalObj, null, p_Query);
	}

	public virtual Model.<#=code.Escape(entity)#>Model Create(<#=code.Escape(entity)#> p_OriginalObj, Model.<#=code.Escape(entity)#>Model p_ReturnObj, <#=code.Escape(entity)#>DTOQuery p_Query)
	{
		if (p_OriginalObj == null) return null;
		
		if(p_ReturnObj == null)
		{
			p_ReturnObj = new <#=code.Escape(entity)#>Model();
		}

		#region Primitive Properties
<#

	foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
	{
#>		p_ReturnObj.<#=code.Escape(edmProperty)#> = p_OriginalObj.<#=code.Escape(edmProperty)#>;
<#
	}

#>
		p_ReturnObj.ComboboxText = p_OriginalObj.ComboboxText;
		#endregion

		if(p_Query != null)
		{

			#region Complex Properties
<#
	foreach(EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == entity))
	{
#>
			if (p_Query.<#=code.FieldName(edmProperty)#> != null)
				p_ReturnObj.<#=code.Escape(edmProperty)#> = new <#=code.Escape(edmProperty.TypeUsage)#>DTOAssembler().Create(p_OriginalObj.<#=code.Escape(edmProperty)#>, p_Query.<#=code.FieldName(edmProperty)#>);
<#
	}
#>
			#endregion

			#region Navigation Properties
<#

	foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(np => np.DeclaringType == entity))
	{
#>
			if (p_Query.<#=code.FieldName(navProperty)#> != null)
				p_ReturnObj.<#=code.Escape(navProperty)#> = new <#=code.Escape(navProperty.ToEndMember.GetEntityType())#>DTOAssembler().Create(p_OriginalObj.<#=code.Escape(navProperty)#>, p_Query.<#=code.FieldName(navProperty)#>);
<#
	}
#>
			#endregion
		}
		
		return p_ReturnObj;
	}
<#
#>
}
<#
    EndNamespace(namespaceName);
}

if (!VerifyTypesAreCaseInsensitiveUnique(ItemCollection))
{
    return "";
}

fileManager.Process();

#>
<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using Plataforma.TI.AtendimentoDemandas.Data.Model;
using Plataforma.TI.AtendimentoDemandas.Utils;
using Microsoft.Practices.Unity;

<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

bool IsReadWriteAccessibleProperty(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);

    return getter != "private" && getter != "protected" && setter != "private" && setter != "protected";
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    Dictionary<string, bool> alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(StructuralType type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }

    }

    return true;
}
#>

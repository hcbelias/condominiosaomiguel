//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

using System.ComponentModel.DataAnnotations;

namespace Model
{
    public partial class SubMenuModel : BaseModel
    {
        #region Primitive Properties
    	
    	public override String ComboboxText { get; set; }
    	
    	[ScaffoldColumn(false)]
    	public override int Id
    	{
    		get;
    		set;
    	}
    
    	[Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Util.Internationalization))]
    
    
    	[Display(Name = "Nome", Prompt = "Nome", ResourceType = typeof(Util.Internationalization))]
    	public virtual string Nome
        {
    		get;
    		set;
    
        }
    	[Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Util.Internationalization))]
    
    
    	[Display(Name = "Link", Prompt = "Link", ResourceType = typeof(Util.Internationalization))]
    	public virtual string Link
        {
    		get;
    		set;
    
        }
    
    	[Display(Name = "ClassName", Prompt = "ClassName", ResourceType = typeof(Util.Internationalization))]
    	public virtual string ClassName
        {
    		get;
    		set;
    
        }
        #endregion
        #region Navigation Properties
    
        public virtual MenuModel Menu
        {
            get { return _menu; }
            set
            {
                if (!ReferenceEquals(_menu, value))
                {
                    var previousValue = _menu;
                    _menu = value;
                    FixupMenu(previousValue);
                }
            }
        }
        private MenuModel _menu;
    
        public virtual ICollection<PerfilModel> Perfil
        {
            get
            {
                if (_perfil == null)
                {
                    var newCollection = new FixupCollection<PerfilModel>();
                    newCollection.CollectionChanged += FixupPerfil;
                    _perfil = newCollection;
                }
                return _perfil;
            }
            set
            {
                if (!ReferenceEquals(_perfil, value))
                {
                    var previousValue = _perfil as FixupCollection<PerfilModel>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPerfil;
                    }
                    _perfil = value;
                    var newValue = value as FixupCollection<PerfilModel>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPerfil;
                    }
                }
            }
        }
        private ICollection<PerfilModel> _perfil;

        #endregion
        #region Association Fixup
    
        private void FixupMenu(MenuModel previousValue)
        {
            if (previousValue != null && previousValue.SubMenu.Contains(this))
            {
                previousValue.SubMenu.Remove(this);
            }
    
            if (Menu != null)
            {
                if (!Menu.SubMenu.Contains(this))
                {
                    Menu.SubMenu.Add(this);
                }
            }
        }
    
        private void FixupPerfil(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PerfilModel item in e.NewItems)
                {
                    if (!item.SubMenu.Contains(this))
                    {
                        item.SubMenu.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PerfilModel item in e.OldItems)
                {
                    if (item.SubMenu.Contains(this))
                    {
                        item.SubMenu.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}

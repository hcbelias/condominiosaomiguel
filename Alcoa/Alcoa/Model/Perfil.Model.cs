//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

using System.ComponentModel.DataAnnotations;

namespace Model
{
    public partial class PerfilModel : BaseModel
    {
        #region Primitive Properties
    	
    	public override String ComboboxText { get; set; }
    	
    	[ScaffoldColumn(false)]
    	public override int Id
    	{
    		get;
    		set;
    	}
    
    	[Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Util.Internationalization))]
    
    
    	[Display(Name = "Name", Prompt = "Name", ResourceType = typeof(Util.Internationalization))]
    	public virtual string Name
        {
    		get;
    		set;
    
        }
        #endregion
        #region Navigation Properties
    
        public virtual ICollection<LoginModel> Login
        {
            get
            {
                if (_login == null)
                {
                    var newCollection = new FixupCollection<LoginModel>();
                    newCollection.CollectionChanged += FixupLogin;
                    _login = newCollection;
                }
                return _login;
            }
            set
            {
                if (!ReferenceEquals(_login, value))
                {
                    var previousValue = _login as FixupCollection<LoginModel>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLogin;
                    }
                    _login = value;
                    var newValue = value as FixupCollection<LoginModel>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLogin;
                    }
                }
            }
        }
        private ICollection<LoginModel> _login;
    
        public virtual ICollection<SubMenuModel> SubMenu
        {
            get
            {
                if (_subMenu == null)
                {
                    var newCollection = new FixupCollection<SubMenuModel>();
                    newCollection.CollectionChanged += FixupSubMenu;
                    _subMenu = newCollection;
                }
                return _subMenu;
            }
            set
            {
                if (!ReferenceEquals(_subMenu, value))
                {
                    var previousValue = _subMenu as FixupCollection<SubMenuModel>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSubMenu;
                    }
                    _subMenu = value;
                    var newValue = value as FixupCollection<SubMenuModel>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSubMenu;
                    }
                }
            }
        }
        private ICollection<SubMenuModel> _subMenu;

        #endregion
        #region Association Fixup
    
        private void FixupLogin(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LoginModel item in e.NewItems)
                {
                    item.Perfil = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LoginModel item in e.OldItems)
                {
                    if (ReferenceEquals(item.Perfil, this))
                    {
                        item.Perfil = null;
                    }
                }
            }
        }
    
        private void FixupSubMenu(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SubMenuModel item in e.NewItems)
                {
                    if (!item.Perfil.Contains(this))
                    {
                        item.Perfil.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SubMenuModel item in e.OldItems)
                {
                    if (item.Perfil.Contains(this))
                    {
                        item.Perfil.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}

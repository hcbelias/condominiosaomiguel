<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ output extension="cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
 <#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\..\..\DAL\DataModel.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = "Model";

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

// Write out support code to primary template output file

BeginNamespace(namespaceName, code);
WriteCustomObservableCollection();
EndNamespace(namespaceName);

// Emit Entity Types
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    fileManager.StartNewFile( entity.Name + "Form.cshtml");
	#>
@using WebControllers
@using Model
@model <#=namespaceName+"."+entity.Name+"Model" #>

@{
	Boolean v_IsNewModel = Model== null || Model.Id == 0;
	String method = v_IsNewModel?"Create": "Edit";
}

@using (Html.BeginForm(method, "<#=entity.Name#>", FormMethod.Post, new { id = "saveFormId", @class = "form-horizontal" }))
{
	@Html.Partial("CustomSummary")
	@Html.Partial("ViewBagMessage")
    <fieldset>

	
        <h1>
            <#=entity.Name#>
			
			</h1>
        <div class="row-fluid">
            <div class="span6">
			<legend>Dados</legend>

	@Html.HiddenFor(model => model.Id)
<# 
  foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
		bool identifierField = code.Escape(edmProperty).ToLower().Equals("identificador") ||
		 code.Escape(edmProperty).ToLower().Equals("id") ||
		 code.Escape(edmProperty).ToLower().Equals("identifier");
		if(!identifierField)
        {
			int index = code.Escape(edmProperty).IndexOf("_");
			string label = code.Escape(edmProperty);
			if(index > 0)
            {
				label = label.Substring(0, index);
            }
			
			bool isRequired = (!edmProperty.Nullable);#>
			<div class="control-group">
				<label class="control-label" >
					@Html.LabelFor(model=>model.<#=label#>)</label>
				<div class="controls">
<#	
	
			if(edmProperty.TypeUsage.EdmType.Name == "DateTime"){ #>
					@Html.EditorFor(model => model.<#=code.Escape(edmProperty)#>)
<#			}
			else if(code.Escape(edmProperty).ToLower().Contains("telefone") || 
					code.Escape(edmProperty).ToLower().Contains("celular") || 
					code.Escape(edmProperty).ToLower().Contains("phone"))
			{ #>
				<input name="<#=code.Escape(edmProperty)#>" id="<#=code.Escape(edmProperty)#>" type="text" class="bfh-phone"  placeholder="<#=code.Escape(edmProperty)#>" data-format="(dd) dddd-ddddd" data-number="@if (Model != null){@Html.Raw(Model.<#=code.Escape(edmProperty)#>);
                                   }" />
								   
<#       }
		else 
        { #>
				    @Html.EditorFor(model => model.<#=code.Escape(edmProperty)#>)
					<br/>
					@Html.ValidationMessageFor(model=>model.<#=code.Escape(edmProperty)#>)
<# 
        }	
        { #>
				    
<# 
        }
		#>
				</div>
			</div>
<#
		}
  }#>

 <#

	foreach (NavigationProperty navProperty in entity.NavigationProperties)	{

			if(navProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many && navProperty.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many || 
			navProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne && navProperty.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many ||
			navProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One && 
			navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne ||
			navProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne && 
			navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne){
	 #>
			<div class="control-group">
				<label class="control-label" >
					@Html.LabelFor(model=>model.<#=code.Escape(navProperty)#>)</label>
				<div class="controls">
					@Html.Partial("<#=code.Escape(navProperty)#>ComboBox", WebControllers.<#=code.Escape(navProperty)#>Controller.GetComboBox(!v_IsNewModel && Model.<#=code.Escape(navProperty)#> != null ? Model.<#=code.Escape(navProperty)#>.Id : 0))
				</div>
			</div>
<#			}
		

	}
#>

  	</div>
			</div>
	</fieldset>
}
@using (Html.BeginForm("Index", "<#=entity.Name#>", FormMethod.Get, new { id = "cancelFormId"}))
{ }
@if (!v_IsNewModel)
{
    using (Html.BeginForm("Delete", "<#=entity.Name#>", new { p_Identifier = Model.Id}, FormMethod.Get, new { id = "deleteFormId"}))
    { @Html.Hidden("p_Identifier", Model.Id) }
}



   <#
}


if (!VerifyTypesAreCaseInsensitiveUnique(ItemCollection))
{
    return "";
}

fileManager.Process();

#>

<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();

    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {

        PushIndent(CodeRegion.GetIndent(1));
    }
}

void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();

    }
}

bool IsReadWriteAccessibleProperty(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);

    return getter != "private" && getter != "protected" && setter != "private" && setter != "protected";
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

void WriteCustomObservableCollection()
{

}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    Dictionary<string, bool> alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(StructuralType type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }

    }

    return true;
}
#>
<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ output extension="cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
 <#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\..\..\DAL\DataModel.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = "Model";

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

// Write out support code to primary template output file

BeginNamespace(namespaceName, code);
WriteCustomObservableCollection();
EndNamespace(namespaceName);
int numberOfFields =0;
// Emit Entity Types
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    fileManager.StartNewFile(entity.Name + "Search.cshtml");
	#>
@using WebControllers
@model <#=namespaceName+"."+entity.Name+"Model" #>
@{
	String method = "Search";
}

@using (Html.BeginForm(method, "<#=entity.Name#>", FormMethod.Post, new { id = "searchFormId" }))
{
<# 

var list = entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity).ToList();
var numberProperties = list.Count();
int propertiesCount = 1;
#> 

<#
  for (int i = 0; i < list.Count;i++)
    {
		EdmProperty edmProperty = list[i];
		
		bool identifierField = code.Escape(edmProperty).ToLower().Equals("identificador") ||
		 code.Escape(edmProperty).ToLower().Equals("id") ||
		 code.Escape(edmProperty).ToLower().Equals("identifier");
		if(!identifierField)
        {
			int index = code.Escape(edmProperty).IndexOf("_");
			string label = code.Escape(edmProperty);
			if(index > 0)
            {
				label = label.Substring(0, index);
            }

			bool isRequired = (!edmProperty.Nullable);#>
			<div class="control-group ">
				<label class="control-label" >
					@Html.LabelFor(model=>model.<#=label#>)</label>
				<div class="controls">

<#	if(edmProperty.TypeUsage.EdmType.Name == "DateTime")
			{ #>
				@Html.EditorFor(model=>model.<#=label#>)
<#         }
			else if(code.Escape(edmProperty).ToLower().Contains("telefone") || 
					code.Escape(edmProperty).ToLower().Contains("celular") || 
					code.Escape(edmProperty).ToLower().Contains("phone"))
			{ #>
				
               <input name=<#=code.Escape(edmProperty)#> id=<#=code.Escape(edmProperty)#> type="text" class="bfh-phone" data-format="(dd) dddd-ddddd" />
<#         }
else
        { #>
				    @Html.EditorFor(model => model.<#=code.Escape(edmProperty)#>)
					@Html.ValidationMessageFor(model=>model.<#=code.Escape(edmProperty)#>)
<# 
        }		
			
		#>
				</div>
			</div>

<#
			propertiesCount++;
		}
  }#>
}

<#
}


if (!VerifyTypesAreCaseInsensitiveUnique(ItemCollection))
{
    return "";
}

fileManager.Process();

#>

<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();

    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {

        PushIndent(CodeRegion.GetIndent(1));
    }
}

void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();

    }
}

bool IsReadWriteAccessibleProperty(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);

    return getter != "private" && getter != "protected" && setter != "private" && setter != "protected";
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

void WriteCustomObservableCollection()
{

}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    Dictionary<string, bool> alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(StructuralType type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }

    }

    return true;
}
#>